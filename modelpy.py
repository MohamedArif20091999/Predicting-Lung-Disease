# -*- coding: utf-8 -*-
"""PNEUMONIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRTCYfM7orCzjDXeLWpoIUl5HiooZRLk
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
from glob import glob
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
# %matplotlib inline
from skimage.io import imread

from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Activation, Dropout, Flatten, Dense,MaxPooling2D

from tensorflow.python.keras.applications import ResNet50
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator, img_to_array,load_img

!pip install git+https://github.com/keras-team/keras-preprocessing.git

train_f='/content/gdrive/My Drive/chest_xray/train'

os.listdir(train_f)
train_norm=train_f+'/NORMAL/'
train_pneum=train_f+'/PNEUMONIA/'

img_name='IM-0122-0001.jpeg'


img_normal=load_img(train_norm+img_name)
print('NORMAL')
plt.imshow(img_normal)
plt.show()

img_name='person12_bacteria_47.jpeg'

img_pneum=load_img(train_pneum+img_name)
print('PNEUMONIA AFFECTED')
plt.imshow(img_pneum)
plt.show()

normal_cases=glob(train_norm+'/*jpeg')
pneumonia_cases=glob(train_pneum+'/*jpeg')
print(len(normal_cases))
print(len(pneumonia_cases))



"""VISUALIZING DATA"""

normal=glob(train_norm+'/*.jpeg')
pneumonia=glob(train_pneum+'/*.jpeg')

train_data=[]

for image in normal:
  train_data.append((image,0))

for image in pneumonia:
  train_data.append((image,1))

train_data=pd.DataFrame(train_data,columns=['image','label'],index=None)

train_data=train_data.sample(frac=1.).reset_index(drop=True)

normal_samples=(train_data[train_data['label']==0]['image'].iloc[:5]).tolist()
pneumonia_samples=(train_data[train_data['label']==1]['image'].iloc[:5]).tolist()

samples=pneumonia_samples+normal_samples

#plot
f,ax=plt.subplots(2,5,figsize=(20,10))
for i in range(10):
  img=imread(samples[i])
  ax[i//5, i%5].imshow(img, cmap='gray')
  if i<5:
    ax[i//5, i%5]
  else:
    ax[i//5, i%5].set_title("NORMAL")
  ax[i//5, i%5].axis('off')
  ax[i//5, i%5].set_aspect('auto')
plt.show()

train_data.head(10)

train_data.shape[0]

#How size's are:
from PIL import Image

im = Image.open('/content/gdrive/My Drive/subset/pneum subset/person12_bacteria_47.jpeg')
width, height = im.size
print(width,height)

img_width,img_height=150,150

train_samples=5224
batch_size=16
epoch=5
steps=train_samples/batch_size

from keras import backend as k
if k.image_data_format()=='channels_first':
  image_shape=(3,img_width,img_height)
else:
  input_shape=(img_width,img_height,3)

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(32))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.summary()

model.input

model.output

model.compile(loss='binary_crossentropy',optimizer='rmsprop',metrics=['accuracy'])

image_size= 150
train_samples=5216
batch_size=16

epoch=5
steps=train_samples/batch_size

data_generator_with_aug=ImageDataGenerator(horizontal_flip=True,width_shift_range=0.2,rescale=1./255,height_shift_range=0.2,shear_range=0.2,zoom_range=0.2)
data_generator_with_no_aug=ImageDataGenerator(preprocessing_function=None)


train_gen=data_generator_with_aug.flow_from_directory(directory='/content/gdrive/My Drive/chest_xray/train/',target_size=(image_size,image_size),batch_size=32,class_mode='binary')
val_gen=data_generator_with_no_aug.flow_from_directory(directory='/content/gdrive/My Drive/chest_xray/val/',target_size=(image_size,image_size),batch_size=16,class_mode='binary')
test_gen=data_generator_with_no_aug.flow_from_directory(directory='/content/gdrive/My Drive/chest_xray/test/',target_size=(image_size,image_size),batch_size=32,class_mode='binary')

model.compile(loss='binary_crossentropy',optimizer="adam",metrics=['acc'])
m=model.fit_generator(train_gen,epochs=epoch,validation_data=val_gen)
scores=model.evaluate_generator(test_gen)
print("Accuracy: ",scores[1]*100)

model.save('final_model.hdf5')

plt.plot(model.history.history['acc'])
plt.plot(model.history.history['val_acc'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Training set', 'Validation set'], loc='lower left')
plt.show()

plt.plot(model.history.history['loss'])
plt.plot(model.history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Training set', 'Test set'], loc='upper left')
plt.show()

m.history['acc'][-1]



from keras.layers import Input,Lambda,Dense,Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

IMAGE_SIZE = [224, 224]
train_path = '/content/gdrive/My Drive/chest_xray/train/'
valid_path = '/content/gdrive/My Drive/chest_xray/test/'

Vgg=VGG16(input_shape=IMAGE_SIZE+[3],weights='imagenet',include_top=False)

for layer in Vgg.layers:
  layer.trainable = False

folders = glob('/content/gdrive/My Drive/chest_xray/train/*')
x = Flatten()(Vgg.output)
prediction = Dense(len(folders), activation='softmax')(x)
model = Model(inputs=Vgg.input, outputs=prediction)
model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/gdrive/My Drive/chest_xray/train/',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/gdrive/My Drive/chest_xray/test/',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

v = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=5,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

plt.plot(v.history['loss'], label='train loss')
plt.plot(v.history['val_loss'], label='val loss')
plt.legend()
plt.show()



plt.plot(v.history['acc'], label='train acc')
plt.plot(v.history['val_acc'], label='val acc')
plt.legend()
plt.show()


import tensorflow as tf

from keras.models import load_model

model.save('modelvgg.h5')

import numpy as np
model = load_model('modelvgg.h5')
img = image.load_img('/content/gdrive/My Drive/chest_xray/val/PNEUMONIA/person1946_bacteria_4874.jpeg', target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
img_data = preprocess_input(x)
predi = model.predict(img_data)

predi

import numpy as np
model = load_model('modelvgg.h5')
img = image.load_img('/content/gdrive/My Drive/chest_xray/val/NORMAL/NORMAL2-IM-1431-0001.jpeg', target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
img_data = preprocess_input(x)
pred = model.predict(img_data)

pred

